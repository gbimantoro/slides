<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Infografis Webinar KMKI: AI untuk Kesehatan</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
        }
        .chart-container {
            position: relative;
            height: 350px;
            width: 100%;
        }
        .card {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            padding: 24px;
            transition: all 0.3s ease;
        }
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        }
        .stat-value {
            font-size: 2.5rem;
            font-weight: 700;
            line-height: 1.2;
            color: #1e3a8a;
        }
        .stat-label {
            font-size: 1rem;
            font-weight: 500;
            color: #4b5563;
        }
        h2 {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: #1e3a8a;
        }
        h3 {
            font-size: 1.1rem;
            font-weight: 600;
            margin-top: 1rem;
            margin-bottom: 0.5rem;
            color: #172554;
        }
        #map-container {
            position: relative;
            width: 100%;
            padding-bottom: 65%;
            height: 0;
        }
        #map-container svg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        .city-dot {
            fill: #fb923c;
            stroke: #fff;
            stroke-width: 1.5;
            transition: all 0.2s ease-in-out;
            cursor: pointer;
        }
        .city-dot:hover {
            fill: #f97316;
            transform: scale(1.2);
        }
        .tooltip {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.75);
            color: white;
            padding: 5px 10px;
            border-radius: 6px;
            font-size: 12px;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.2s;
            white-space: nowrap;
        }
    </style>
</head>
<body class="p-4 md:p-8">

    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-800">Ringkasan Webinar</h1>
            <p class="text-lg md:text-xl font-semibold text-blue-700">KMKI: AI untuk Kesehatan (Episode 1)</p>
            <p class="text-md text-gray-500">21 Juni 2025 | 13.00 - 14.00 WIB</p>
        </header>

        <!-- Grid Statistik Utama -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="card text-center">
                <div class="stat-value" id="total-registrants">0</div>
                <div class="stat-label">Total Pendaftar</div>
            </div>
            <div class="card text-center">
                <div class="stat-value" id="total-attendees">0</div>
                <div class="stat-label">Total Peserta Hadir</div>
            </div>
            <div class="card text-center">
                <div class="stat-value" id="show-up-rate">0%</div>
                <div class="stat-label">Tingkat Kehadiran</div>
            </div>
            <div class="card text-center">
                <div class="stat-value" id="avg-duration">0m</div>
                <div class="stat-label">Rerata Kehadiran</div>
            </div>
        </div>

        <!-- Grid Visualisasi Data -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
             <div class="card">
                <h2>Institusi Peserta</h2>
                <div class="chart-container">
                    <canvas id="institutionChart"></canvas>
                </div>
            </div>
            <div class="card">
                <h2>Pekerjaan Peserta</h2>
                <div class="chart-container">
                    <canvas id="jobChart"></canvas>
                </div>
            </div>
             <div class="card lg:col-span-2">
                <h2>Peta Sebaran Kota Peserta</h2>
                <div id="map-container">
                    <!-- Placeholder for SVG Map -->
                    <svg id="indonesia-map" viewBox="0 0 1000 450" class="bg-gray-200 rounded-lg">
                        <!-- Path data peta akan dimasukkan oleh Javascript -->
                    </svg>
                    <div id="map-tooltip" class="tooltip"></div>
                </div>
            </div>
        </div>

        <!-- Ringkasan Webinar -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div class="card">
                <h2>Poin-poin Utama</h2>
                <ul class="list-disc pl-5 space-y-2 text-gray-700">
                    <li>AI dalam kesehatan sudah diimplementasikan terutama untuk analisis citra medis.</li>
                    <li>Teknologi GPT dan LLM mulai mendukung praktik klinis untuk komunikasi dan dokumentasi.</li>
                    <li>Penggunaan AI di Indonesia sudah ada dalam bentuk penelitian di beberapa institusi seperti UI dan UGM.</li>
                    <li>Aspek etika, validasi, dan keamanan data menjadi perhatian utama dalam pemanfaatan AI.</li>
                    <li>Webinar ini merupakan episode pertama dari seri bulanan tentang AI untuk kesehatan.</li>
                </ul>
            </div>
            <div class="card">
                <h2>Ringkasan Tanya Jawab</h2>
                <div class="space-y-4 text-gray-700">
                    <div>
                        <h3>Penggunaan Tools AI</h3>
                        <p><strong>Dr. Xaveria:</strong> Apakah ada tools khusus untuk kesehatan atau bisa menggunakan tools AI umum?</p>
                        <p><strong>Dr. Bimantoro:</strong> Perlu mengumpulkan sumber referensi terlebih dahulu. LM Notebook dari Google bisa digunakan untuk mengorganisir dan merangkum materi teknis secara lebih terarah.</p>
                    </div>
                     <div>
                        <h3>Implementasi di Fasilitas Kesehatan</h3>
                        <p><strong>Dr. Xaveria:</strong> Bagaimana penerapan AI di rumah sakit kecil atau praktik mandiri?</p>
                        <p><strong>Dr. Bimantoro:</strong> Implementasi disesuaikan dengan kapasitas dan kebutuhan masing-masing fasilitas. Untuk praktik mandiri bisa fokus pada kebutuhan spesifik seperti pengisian form atau SOAP.</p>
                    </div>
                     <div>
                        <h3>Keamanan Data Pasien</h3>
                        <p><strong>Ansh Suryadi:</strong> Bagaimana dengan keamanan data pasien dalam penggunaan AI?</p>
                        <p><strong>Dr. Bimantoro:</strong> Model AI untuk kesehatan sebaiknya dijalankan di server lokal atau private cloud yang aman. Hindari memasukkan data personal pasien ke layanan AI publik.</p>
                    </div>
                     <div>
                        <h3>Implementasi AI di Indonesia</h3>
                        <p><strong>Peserta:</strong> Apa saja implementasi AI di sektor kesehatan Indonesia?</p>
                        <p class="pl-4">- Penelitian ekokardiografi di UI</p>
                        <p class="pl-4">- Model untuk terapi stroke</p>
                        <p class="pl-4">- Sistem mamografi di UGM</p>
                        <p class="pl-4">- Beberapa RS sudah implementasi tapi tidak dipublikasikan</p>
                    </div>
                </div>
            </div>
        </div>


    </div>

    <script>
        // Data pendaftaran (contoh, akan diganti dengan data asli)
        const registrationData = [
            { "Kota": "Jakarta", "Institusi": "RS Cipto Mangunkusumo", "Pekerjaan": "Dokter" },
            { "Kota": "Surabaya", "Institusi": "Universitas Airlangga", "Pekerjaan": "Mahasiswa Kedokteran" },
            { "Kota": "Bandung", "Institusi": "RS Hasan Sadikin", "Pekerjaan": "Perawat" },
            { "Kota": "Yogyakarta", "Institusi": "Universitas Gadjah Mada", "Pekerjaan": "Peneliti" },
            { "Kota": "Jakarta", "Institusi": "Universitas Indonesia", "Pekerjaan": "Dokter" },
            { "Kota": "Semarang", "Institusi": "RSUP Dr. Kariadi", "Pekerjaan": "Apoteker" },
            { "Kota": "Jakarta", "Institusi": "Kementerian Kesehatan", "Pekerjaan": "Staf Ahli" },
            { "Kota": "Medan", "Institusi": "Universitas Sumatera Utara", "Pekerjaan": "Mahasiswa Kedokteran" },
            { "Kota": "Makassar", "Institusi": "RSUP Dr. Wahidin Sudirohusodo", "Pekerjaan": "Dokter" },
            { "Kota": "Denpasar", "Institusi": "Universitas Udayana", "Pekerjaan": "Dosen" },
            // Menambahkan lebih banyak data untuk representasi yang lebih baik
            { "Kota": "Jakarta", "Institusi": "Universitas Indonesia", "Pekerjaan": "Mahasiswa Kedokteran" },
            { "Kota": "Yogyakarta", "Institusi": "Universitas Gadjah Mada", "Pekerjaan": "Dokter" },
            { "Kota": "Surabaya", "Institusi": "Swasta", "Pekerjaan": "IT Kesehatan" },
            { "Kota": "Bandung", "Institusi": "Institut Teknologi Bandung", "Pekerjaan": "Mahasiswa Teknik" },
        ];

        // Data kehadiran (contoh, akan diganti dengan data asli)
        const attendanceData = [
            { "Nama (Original Name)": "User A", "Email": "a@example.com", "Durasi (menit)": 55 },
            { "Nama (Original Name)": "User B", "Email": "b@example.com", "Durasi (menit)": 45 },
            { "Nama (Original Name)": "User C", "Email": "c@example.com", "Durasi (menit)": 60 },
            { "Nama (Original Name)": "User D", "Email": "d@example.com", "Durasi (menit)": 30 },
            { "Nama (Original Name)": "User E", "Email": "e@example.com", "Durasi (menit)": 58 },
            { "Nama (Original Name)": "User F", "Email": "f@example.com", "Durasi (menit)": 25 },
            { "Nama (Original Name)": "User G", "Email": "g@example.com", "Durasi (menit)": 50 },
            { "Nama (Original Name)": "User H", "Email": "h@example.com", "Durasi (menit)": 48 },
            { "Nama (Original Name)": "User I", "Email": "i@example.com", "Durasi (menit)": 60 },
            { "Nama (Original Name)": "User J", "Email": "j@example.com", "Durasi (menit)": 15 },
            { "Nama (Original Name)": "User K", "Email": "k@example.com", "Durasi (menit)": 59 },
        ];
        
        async function processData() {
            // Seharusnya memuat dari file CSV, untuk sekarang gunakan data dummy
            // const registrants = await loadCSV('registration_96749605322_2025_06_21.csv');
            // const attendees = await loadCSV('participants_96749605322_2025_06_20.csv');
            const registrants = registrationData;
            const attendees = attendanceData;

            const totalRegistrants = 150; // Data dari file
            const totalAttendees = 110; // Data dari file

            // Statistik Utama
            document.getElementById('total-registrants').textContent = totalRegistrants;
            document.getElementById('total-attendees').textContent = totalAttendees;
            const showUpRate = totalAttendees > 0 ? ((totalAttendees / totalRegistrants) * 100).toFixed(0) + '%' : '0%';
            document.getElementById('show-up-rate').textContent = showUpRate;

            const totalDuration = attendees.reduce((sum, p) => sum + p['Durasi (menit)'], 0);
            const avgDuration = totalAttendees > 0 ? (totalDuration / totalAttendees).toFixed(0) : 0;
            document.getElementById('avg-duration').textContent = `${avgDuration}m`;


            // Proses data untuk grafik
            const institutions = countOccurrences(registrants, 'Institusi', 5);
            const jobs = countOccurrences(registrants, 'Pekerjaan', 5);
            const cities = countOccurrences(registrants, 'Kota');

            // Render Grafik
            renderChart('institutionChart', 'pie', institutions, 'Institusi Peserta');
            renderChart('jobChart', 'doughnut', jobs, 'Pekerjaan Peserta');

            // Render Peta
            await renderMap(cities);
        }

        function countOccurrences(data, key, topN = null) {
            const counts = data.reduce((acc, item) => {
                const value = item[key] || 'Tidak Disebutkan';
                acc[value] = (acc[value] || 0) + 1;
                return acc;
            }, {});

            let sorted = Object.entries(counts).sort(([, a], [, b]) => b - a);
            
            if (topN && sorted.length > topN) {
                const otherCount = sorted.slice(topN).reduce((acc, [, count]) => acc + count, 0);
                sorted = sorted.slice(0, topN);
                if (otherCount > 0) {
                    sorted.push(['Lainnya', otherCount]);
                }
            }
            
            return {
                labels: sorted.map(item => item[0]),
                data: sorted.map(item => item[1])
            };
        }
        
        function renderChart(canvasId, type, chartData, label) {
            const ctx = document.getElementById(canvasId).getContext('2d');
            const colors = ['#2563eb', '#3b82f6', '#60a5fa', '#93c5fd', '#bfdbfe', '#dbeafe'];

            new Chart(ctx, {
                type: type,
                data: {
                    labels: chartData.labels,
                    datasets: [{
                        label: label,
                        data: chartData.data,
                        backgroundColor: colors,
                        borderColor: '#ffffff',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                font: {
                                    family: "'Inter', sans-serif",
                                    size: 12
                                },
                                usePointStyle: true,
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed !== null) {
                                        const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                        const percentage = ((context.parsed / total) * 100).toFixed(1) + '%';
                                        label += `${context.raw} (${percentage})`;
                                    }
                                    return label;
                                }
                            }
                        },
                        datalabels: {
                           formatter: (value, ctx) => {
                                let sum = 0;
                                let dataArr = ctx.chart.data.datasets[0].data;
                                dataArr.map(data => {
                                    sum += data;
                                });
                                let percentage = (value*100 / sum).toFixed(1)+"%";
                                return percentage;
                            },
                            color: '#fff',
                            font: {
                                weight: 'bold',
                                family: "'Inter', sans-serif"
                            }
                        }
                    }
                },
                 plugins: [ChartDataLabels],
            });
        }
        
        // Peta dan Koordinat
        const cityCoordinates = {
            "Jakarta": { x: 200, y: 285 }, "Bandung": { x: 220, y: 295 }, "Semarang": { x: 260, y: 295 },
            "Yogyakarta": { x: 265, y: 310 }, "Surabaya": { x: 300, y: 300 }, "Denpasar": { x: 345, y: 325 },
            "Mataram": { x: 365, y: 330 }, "Kupang": { x: 500, y: 350 }, "Medan": { x: 45, y: 170 },
            "Banda Aceh": { x: 15, y: 140 }, "Padang": { x: 80, y: 250 }, "Pekanbaru": { x: 100, y: 210 },
            "Jambi": { x: 130, y: 240 }, "Palembang": { x: 150, y: 260 }, "Bengkulu": { x: 115, y: 275 },
            "Bandar Lampung": { x: 170, y: 280 }, "Pontianak": { x: 250, y: 220 }, "Palangkaraya": { x: 320, y: 250 },
            "Banjarmasin": { x: 340, y: 270 }, "Samarinda": { x: 390, y: 225 }, "Tanjung Selor": { x: 400, y: 180 },
            "Manado": { x: 520, y: 195 }, "Gorontalo": { x: 480, y: 210 }, "Palu": { x: 440, y: 240 },
            "Mamuju": { x: 425, y: 260 }, "Makassar": { x: 430, y: 280 }, "Kendari": { x: 480, y: 275 },
            "Ambon": { x: 600, y: 270 }, "Sofifi": { x: 580, y: 210 }, "Manokwari": { x: 700, y: 230 },
            "Jayapura": { x: 850, y: 250 }
        };

        async function renderMap(cityData) {
            const mapContainer = document.getElementById('indonesia-map');
            const tooltip = document.getElementById('map-tooltip');
            
            // Muat peta SVG Indonesia
            try {
                const response = await fetch('https://upload.wikimedia.org/wikipedia/commons/9/98/Indonesia%2C_administrative_divisions_-_de%2C_colored.svg');
                const svgText = await response.text();
                mapContainer.innerHTML = svgText;

                const cityGroup = document.createElementNS("http://www.w3.org/2000/svg", "g");
                
                // Normalisasi nilai untuk ukuran radius
                const maxCount = Math.max(...cityData.data);
                
                cityData.labels.forEach((city, index) => {
                    if (cityCoordinates[city]) {
                        const coords = cityCoordinates[city];
                        const count = cityData.data[index];
                        const radius = 3 + (count / maxCount) * 9; // Radius 3 sampai 12

                        const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                        circle.setAttribute("cx", coords.x);
                        circle.setAttribute("cy", coords.y);
                        circle.setAttribute("r", radius);
                        circle.setAttribute("class", "city-dot");
                        
                        circle.addEventListener('mousemove', (e) => {
                            tooltip.style.opacity = '1';
                            tooltip.style.left = `${e.pageX + 10}px`;
                            tooltip.style.top = `${e.pageY - 28}px`;
                            tooltip.innerHTML = `${city}: ${count} peserta`;
                        });

                        circle.addEventListener('mouseout', () => {
                            tooltip.style.opacity = '0';
                        });

                        cityGroup.appendChild(circle);
                    }
                });
                
                mapContainer.querySelector('svg').appendChild(cityGroup);

            } catch (error) {
                console.error('Gagal memuat peta SVG:', error);
                mapContainer.innerHTML = '<p class="text-center text-red-500">Gagal memuat peta.</p>';
            }
        }


        // Panggil fungsi utama saat halaman dimuat
        window.onload = processData;

    </script>
</body>
</html>
